// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { WidgetsListData, WidgetsListResponses, WidgetsListErrors, WidgetsCreateData, WidgetsCreateResponses, WidgetsCreateErrors, WidgetsDeleteData, WidgetsDeleteResponses, WidgetsDeleteErrors, WidgetsReadData, WidgetsReadResponses, WidgetsReadErrors, WidgetsUpdateData, WidgetsUpdateResponses, WidgetsUpdateErrors, WidgetsAnalyzeData, WidgetsAnalyzeResponses, WidgetsAnalyzeErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List widgets
 */
export const widgetsList = <ThrowOnError extends boolean = false>(options?: Options<WidgetsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<WidgetsListResponses, WidgetsListErrors, ThrowOnError>({
        url: '/widgets',
        ...options
    });
};

/**
 * Create a widget
 */
export const widgetsCreate = <ThrowOnError extends boolean = false>(options: Options<WidgetsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WidgetsCreateResponses, WidgetsCreateErrors, ThrowOnError>({
        url: '/widgets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a widget
 */
export const widgetsDelete = <ThrowOnError extends boolean = false>(options: Options<WidgetsDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WidgetsDeleteResponses, WidgetsDeleteErrors, ThrowOnError>({
        url: '/widgets/{id}',
        ...options
    });
};

/**
 * Read widgets
 */
export const widgetsRead = <ThrowOnError extends boolean = false>(options: Options<WidgetsReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WidgetsReadResponses, WidgetsReadErrors, ThrowOnError>({
        url: '/widgets/{id}',
        ...options
    });
};

/**
 * Update a widget
 */
export const widgetsUpdate = <ThrowOnError extends boolean = false>(options: Options<WidgetsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<WidgetsUpdateResponses, WidgetsUpdateErrors, ThrowOnError>({
        url: '/widgets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/merge-patch+json',
            ...options.headers
        }
    });
};

/**
 * Analyze a widget
 */
export const widgetsAnalyze = <ThrowOnError extends boolean = false>(options: Options<WidgetsAnalyzeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WidgetsAnalyzeResponses, WidgetsAnalyzeErrors, ThrowOnError>({
        url: '/widgets/{id}/analyze',
        ...options
    });
};
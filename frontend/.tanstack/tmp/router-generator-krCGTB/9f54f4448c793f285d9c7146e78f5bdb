/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as SignInIndexRouteImport } from './routes/sign-in/index'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedAdminRouteImport } from './routes/_protected/admin'
import { Route as ProtectedTodoListSelectIndexRouteImport } from './routes/_protected/todo-list-select/index'
import { Route as ProtectedAccountIndexRouteImport } from './routes/_protected/account/index'
import { Route as ProtectedAdminOrganizationsIndexRouteImport } from './routes/_protected/admin/organizations/index'
import { Route as ProtectedOrganizationsOrganizationIdUsersIndexRouteImport } from './routes/_protected/organizations/$organizationId/users/index'
import { Route as ProtectedOrganizationsOrganizationIdTodosIndexRouteImport } from './routes/_protected/organizations/$organizationId/todos/index'

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInIndexRoute = SignInIndexRouteImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedAdminRoute = ProtectedAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedTodoListSelectIndexRoute =
  ProtectedTodoListSelectIndexRouteImport.update({
    id: '/todo-list-select/',
    path: '/todo-list-select/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedAccountIndexRoute = ProtectedAccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedAdminOrganizationsIndexRoute =
  ProtectedAdminOrganizationsIndexRouteImport.update({
    id: '/organizations/',
    path: '/organizations/',
    getParentRoute: () => ProtectedAdminRoute,
  } as any)
const ProtectedOrganizationsOrganizationIdUsersIndexRoute =
  ProtectedOrganizationsOrganizationIdUsersIndexRouteImport.update({
    id: '/organizations/$organizationId/users/',
    path: '/organizations/$organizationId/users/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedOrganizationsOrganizationIdTodosIndexRoute =
  ProtectedOrganizationsOrganizationIdTodosIndexRouteImport.update({
    id: '/organizations/$organizationId/todos/',
    path: '/organizations/$organizationId/todos/',
    getParentRoute: () => ProtectedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/admin': typeof ProtectedAdminRouteWithChildren
  '/': typeof ProtectedIndexRoute
  '/sign-in': typeof SignInIndexRoute
  '/account': typeof ProtectedAccountIndexRoute
  '/todo-list-select': typeof ProtectedTodoListSelectIndexRoute
  '/admin/organizations': typeof ProtectedAdminOrganizationsIndexRoute
  '/organizations/$organizationId/todos': typeof ProtectedOrganizationsOrganizationIdTodosIndexRoute
  '/organizations/$organizationId/users': typeof ProtectedOrganizationsOrganizationIdUsersIndexRoute
}
export interface FileRoutesByTo {
  '/admin': typeof ProtectedAdminRouteWithChildren
  '/': typeof ProtectedIndexRoute
  '/sign-in': typeof SignInIndexRoute
  '/account': typeof ProtectedAccountIndexRoute
  '/todo-list-select': typeof ProtectedTodoListSelectIndexRoute
  '/admin/organizations': typeof ProtectedAdminOrganizationsIndexRoute
  '/organizations/$organizationId/todos': typeof ProtectedOrganizationsOrganizationIdTodosIndexRoute
  '/organizations/$organizationId/users': typeof ProtectedOrganizationsOrganizationIdUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/admin': typeof ProtectedAdminRouteWithChildren
  '/_protected/': typeof ProtectedIndexRoute
  '/sign-in/': typeof SignInIndexRoute
  '/_protected/account/': typeof ProtectedAccountIndexRoute
  '/_protected/todo-list-select/': typeof ProtectedTodoListSelectIndexRoute
  '/_protected/admin/organizations/': typeof ProtectedAdminOrganizationsIndexRoute
  '/_protected/organizations/$organizationId/todos/': typeof ProtectedOrganizationsOrganizationIdTodosIndexRoute
  '/_protected/organizations/$organizationId/users/': typeof ProtectedOrganizationsOrganizationIdUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/'
    | '/sign-in'
    | '/account'
    | '/todo-list-select'
    | '/admin/organizations'
    | '/organizations/$organizationId/todos'
    | '/organizations/$organizationId/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/'
    | '/sign-in'
    | '/account'
    | '/todo-list-select'
    | '/admin/organizations'
    | '/organizations/$organizationId/todos'
    | '/organizations/$organizationId/users'
  id:
    | '__root__'
    | '/_protected'
    | '/_protected/admin'
    | '/_protected/'
    | '/sign-in/'
    | '/_protected/account/'
    | '/_protected/todo-list-select/'
    | '/_protected/admin/organizations/'
    | '/_protected/organizations/$organizationId/todos/'
    | '/_protected/organizations/$organizationId/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  SignInIndexRoute: typeof SignInIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in/': {
      id: '/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin': {
      id: '/_protected/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/todo-list-select/': {
      id: '/_protected/todo-list-select/'
      path: '/todo-list-select'
      fullPath: '/todo-list-select'
      preLoaderRoute: typeof ProtectedTodoListSelectIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/account/': {
      id: '/_protected/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof ProtectedAccountIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin/organizations/': {
      id: '/_protected/admin/organizations/'
      path: '/organizations'
      fullPath: '/admin/organizations'
      preLoaderRoute: typeof ProtectedAdminOrganizationsIndexRouteImport
      parentRoute: typeof ProtectedAdminRoute
    }
    '/_protected/organizations/$organizationId/users/': {
      id: '/_protected/organizations/$organizationId/users/'
      path: '/organizations/$organizationId/users'
      fullPath: '/organizations/$organizationId/users'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdUsersIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/organizations/$organizationId/todos/': {
      id: '/_protected/organizations/$organizationId/todos/'
      path: '/organizations/$organizationId/todos'
      fullPath: '/organizations/$organizationId/todos'
      preLoaderRoute: typeof ProtectedOrganizationsOrganizationIdTodosIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedAdminRouteChildren {
  ProtectedAdminOrganizationsIndexRoute: typeof ProtectedAdminOrganizationsIndexRoute
}

const ProtectedAdminRouteChildren: ProtectedAdminRouteChildren = {
  ProtectedAdminOrganizationsIndexRoute: ProtectedAdminOrganizationsIndexRoute,
}

const ProtectedAdminRouteWithChildren = ProtectedAdminRoute._addFileChildren(
  ProtectedAdminRouteChildren,
)

interface ProtectedRouteChildren {
  ProtectedAdminRoute: typeof ProtectedAdminRouteWithChildren
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedAccountIndexRoute: typeof ProtectedAccountIndexRoute
  ProtectedTodoListSelectIndexRoute: typeof ProtectedTodoListSelectIndexRoute
  ProtectedOrganizationsOrganizationIdTodosIndexRoute: typeof ProtectedOrganizationsOrganizationIdTodosIndexRoute
  ProtectedOrganizationsOrganizationIdUsersIndexRoute: typeof ProtectedOrganizationsOrganizationIdUsersIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAdminRoute: ProtectedAdminRouteWithChildren,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedAccountIndexRoute: ProtectedAccountIndexRoute,
  ProtectedTodoListSelectIndexRoute: ProtectedTodoListSelectIndexRoute,
  ProtectedOrganizationsOrganizationIdTodosIndexRoute:
    ProtectedOrganizationsOrganizationIdTodosIndexRoute,
  ProtectedOrganizationsOrganizationIdUsersIndexRoute:
    ProtectedOrganizationsOrganizationIdUsersIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  SignInIndexRoute: SignInIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
